{"/home/travis/build/npmtest/node-npmtest-multer-s3/test.js":"/* istanbul instrument in package npmtest_multer_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multer-s3/lib.npmtest_multer_s3.js":"/* istanbul instrument in package npmtest_multer_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_multer_s3 = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_multer_s3 = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-multer-s3/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-multer-s3 && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_multer_s3 */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_multer_s3\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_multer_s3.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_multer_s3.rollup.js'] =\n            local.assetsDict['/assets.npmtest_multer_s3.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_multer_s3.__dirname + '/lib.npmtest_multer_s3.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-multer-s3/node_modules/multer-s3/index.js":"var crypto = require('crypto')\nvar stream = require('stream')\nvar fileType = require('file-type')\nvar parallel = require('run-parallel')\n\nfunction staticValue (value) {\n  return function (req, file, cb) {\n    cb(null, value)\n  }\n}\n\nvar defaultAcl = staticValue('private')\nvar defaultContentType = staticValue('application/octet-stream')\n\nvar defaultMetadata = staticValue(null)\nvar defaultCacheControl = staticValue(null)\nvar defaultContentDisposition = staticValue(null)\nvar defaultStorageClass = staticValue('STANDARD')\nvar defaultSSE = staticValue(null)\nvar defaultSSEKMS = staticValue(null)\n\nfunction defaultKey (req, file, cb) {\n  crypto.randomBytes(16, function (err, raw) {\n    cb(err, err ? undefined : raw.toString('hex'))\n  })\n}\n\nfunction autoContentType (req, file, cb) {\n  file.stream.once('data', function (firstChunk) {\n    var type = fileType(firstChunk)\n    var mime = (type === null ? 'application/octet-stream' : type.mime)\n    var outStream = new stream.PassThrough()\n\n    outStream.write(firstChunk)\n    file.stream.pipe(outStream)\n\n    cb(null, mime, outStream)\n  })\n}\n\nfunction collect (storage, req, file, cb) {\n  parallel([\n    storage.getBucket.bind(storage, req, file),\n    storage.getKey.bind(storage, req, file),\n    storage.getAcl.bind(storage, req, file),\n    storage.getMetadata.bind(storage, req, file),\n    storage.getCacheControl.bind(storage, req, file),\n    storage.getContentDisposition.bind(storage, req, file),\n    storage.getStorageClass.bind(storage, req, file),\n    storage.getSSE.bind(storage, req, file),\n    storage.getSSEKMS.bind(storage, req, file)\n  ], function (err, values) {\n    if (err) return cb(err)\n\n    storage.getContentType(req, file, function (err, contentType, replacementStream) {\n      if (err) return cb(err)\n\n      cb.call(storage, null, {\n        bucket: values[0],\n        key: values[1],\n        acl: values[2],\n        metadata: values[3],\n        cacheControl: values[4],\n        contentDisposition: values[5],\n        storageClass: values[6],\n        contentType: contentType,\n        replacementStream: replacementStream,\n        serverSideEncryption: values[7],\n        sseKmsKeyId: values[8]\n      })\n    })\n  })\n}\n\nfunction S3Storage (opts) {\n  switch (typeof opts.s3) {\n    case 'object': this.s3 = opts.s3; break\n    default: throw new TypeError('Expected opts.s3 to be object')\n  }\n\n  switch (typeof opts.bucket) {\n    case 'function': this.getBucket = opts.bucket; break\n    case 'string': this.getBucket = staticValue(opts.bucket); break\n    case 'undefined': throw new Error('bucket is required')\n    default: throw new TypeError('Expected opts.bucket to be undefined, string or function')\n  }\n\n  switch (typeof opts.key) {\n    case 'function': this.getKey = opts.key; break\n    case 'undefined': this.getKey = defaultKey; break\n    default: throw new TypeError('Expected opts.key to be undefined or function')\n  }\n\n  switch (typeof opts.acl) {\n    case 'function': this.getAcl = opts.acl; break\n    case 'string': this.getAcl = staticValue(opts.acl); break\n    case 'undefined': this.getAcl = defaultAcl; break\n    default: throw new TypeError('Expected opts.acl to be undefined, string or function')\n  }\n\n  switch (typeof opts.contentType) {\n    case 'function': this.getContentType = opts.contentType; break\n    case 'undefined': this.getContentType = defaultContentType; break\n    default: throw new TypeError('Expected opts.contentType to be undefined or function')\n  }\n\n  switch (typeof opts.metadata) {\n    case 'function': this.getMetadata = opts.metadata; break\n    case 'undefined': this.getMetadata = defaultMetadata; break\n    default: throw new TypeError('Expected opts.metadata to be undefined or function')\n  }\n\n  switch (typeof opts.cacheControl) {\n    case 'function': this.getCacheControl = opts.cacheControl; break\n    case 'string': this.getCacheControl = staticValue(opts.cacheControl); break\n    case 'undefined': this.getCacheControl = defaultCacheControl; break\n    default: throw new TypeError('Expected opts.cacheControl to be undefined, string or function')\n  }\n\n  switch (typeof opts.contentDisposition) {\n    case 'function': this.getContentDisposition = opts.contentDisposition; break\n    case 'string': this.getContentDisposition = staticValue(opts.contentDisposition); break\n    case 'undefined': this.getContentDisposition = defaultContentDisposition; break\n    default: throw new TypeError('Expected opts.contentDisposition to be undefined, string or function')\n  }\n\n  switch (typeof opts.storageClass) {\n    case 'function': this.getStorageClass = opts.storageClass; break\n    case 'string': this.getStorageClass = staticValue(opts.storageClass); break\n    case 'undefined': this.getStorageClass = defaultStorageClass; break\n    default: throw new TypeError('Expected opts.storageClass to be undefined, string or function')\n  }\n\n  switch (typeof opts.serverSideEncryption) {\n    case 'function': this.getSSE = opts.serverSideEncryption; break\n    case 'string': this.getSSE = staticValue(opts.serverSideEncryption); break\n    case 'undefined': this.getSSE = defaultSSE; break\n    default: throw new TypeError('Expected opts.serverSideEncryption to be undefined, string or function')\n  }\n\n  switch (typeof opts.sseKmsKeyId) {\n    case 'function': this.getSSEKMS = opts.sseKmsKeyId; break\n    case 'string': this.getSSEKMS = staticValue(opts.sseKmsKeyId); break\n    case 'undefined': this.getSSEKMS = defaultSSEKMS; break\n    default: throw new TypeError('Expected opts.sseKmsKeyId to be undefined, string, or function')\n  }\n}\n\nS3Storage.prototype._handleFile = function (req, file, cb) {\n  collect(this, req, file, function (err, opts) {\n    if (err) return cb(err)\n\n    var currentSize = 0\n\n    var params = {\n      Bucket: opts.bucket,\n      Key: opts.key,\n      ACL: opts.acl,\n      CacheControl: opts.cacheControl,\n      ContentType: opts.contentType,\n      Metadata: opts.metadata,\n      StorageClass: opts.storageClass,\n      ServerSideEncryption: opts.serverSideEncryption,\n      SSEKMSKeyId: opts.sseKmsKeyId,\n      Body: (opts.replacementStream || file.stream)\n    }\n\n    if (opts.contentDisposition) {\n      params.ContentDisposition = opts.contentDisposition\n    }\n\n    var upload = this.s3.upload(params)\n\n    upload.on('httpUploadProgress', function (ev) {\n      if (ev.total) currentSize = ev.total\n    })\n\n    upload.send(function (err, result) {\n      if (err) return cb(err)\n\n      cb(null, {\n        size: currentSize,\n        bucket: opts.bucket,\n        key: opts.key,\n        acl: opts.acl,\n        contentType: opts.contentType,\n        contentDisposition: opts.contentDisposition,\n        storageClass: opts.storageClass,\n        serverSideEncryption: opts.serverSideEncryption,\n        metadata: opts.metadata,\n        location: result.Location,\n        etag: result.ETag\n      })\n    })\n  })\n}\n\nS3Storage.prototype._removeFile = function (req, file, cb) {\n  this.s3.deleteObject({ Bucket: file.bucket, Key: file.key }, cb)\n}\n\nmodule.exports = function (opts) {\n  return new S3Storage(opts)\n}\n\nmodule.exports.AUTO_CONTENT_TYPE = autoContentType\nmodule.exports.DEFAULT_CONTENT_TYPE = defaultContentType\n"}